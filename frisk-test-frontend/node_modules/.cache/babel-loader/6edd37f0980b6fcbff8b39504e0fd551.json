{"ast":null,"code":"var _jsxFileName = \"/home/dgnan/frisk-test/frisk-test-frontend/src/components/Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useModal from 'react-hooks-use-modal';\nimport { CSVDownload } from 'react-csv';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Table() {\n  _s();\n\n  const [postid, setPostid] = useState(\"\");\n  const [pinNotifVisible, setPinNotifVisible] = useState(false);\n  const [exportCSV, setExportCSV] = useState(false);\n  const [pin, setPin] = useState(\"\");\n  const [posts, setPosts] = useState([]);\n  const [csvData, setCSVData] = useState([]);\n  const [Modal, open, close] = useModal('root', {\n    preventScroll: true\n  });\n  useEffect(() => {\n    pullPosts();\n  }, []);\n\n  const pullPosts = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/all\");\n      const data = await res.json();\n      setPosts(data);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const verifyPin = async e => {\n    e.preventDefault();\n\n    try {\n      const res = await fetch(\"http://localhost:5000/auth\", {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          post_id: postid,\n          post_pin: pin\n        })\n      });\n\n      if (res.status === 200) {\n        const data = await res.json();\n\n        for (var i = 0; i < posts.length; i++) {\n          if (posts[i].post_id === postid) {\n            posts[i].post_message = data.post_message;\n            break;\n          }\n        }\n\n        close();\n      } else {\n        setPinNotifVisible(true);\n      }\n\n      setPin(\"\");\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const deletePost = async id => {\n    try {\n      console.log(await fetch(`http://localhost:5000/delete/${id}`, {\n        method: \"DELETE\"\n      }));\n      setPosts(posts.filter(p => p.post_id !== id));\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const savePostID = post_id => {\n    try {\n      setPinNotifVisible(false);\n      setPostid(post_id);\n      open();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const exitModal = () => {\n    setPinNotifVisible(false);\n    close();\n  };\n\n  const exportSelectedRows = async () => {\n    if (csvData !== []) {\n      const children = document.getElementById(\"table-data\").childNodes;\n      var exportData = []; //aware of how slow it is to find all selected exports,\n      //would be more ideal to use a hashmap as the data structure for \n      //posts however will take too much time at this point to change it.\n\n      children.forEach(child => {\n        if (child.childNodes.item(4).childNodes.item(0).checked) {\n          posts.filter(p => p.post_id == child.id.substring(10)).forEach(item => {\n            exportData.push(item);\n            console.log(item);\n          });\n        }\n      });\n      setCSVData(exportData);\n      setExportCSV(true);\n      await sleep(1);\n      setExportCSV(false);\n      setCSVData([]);\n    }\n  };\n\n  const sleep = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: exportCSV ? /*#__PURE__*/_jsxDEV(CSVDownload, {\n              data: csvData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 42\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"table-btn\",\n              onClick: exportSelectedRows,\n              children: \"Export\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 87\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        id: \"table-data\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: `post-data-${post.post_id}`,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: post.post_creation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: post.post_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: post.post_message !== \"\" ? post.post_message : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"table-btn\",\n              onClick: () => savePostID(post.post_id),\n              children: \"Reveal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 81\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"table-btn\",\n              onClick: () => deletePost(post.post_id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            id: \"table-data-export\",\n            className: \"table-checkbox\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"table-data-export-checkbox\",\n              type: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 83\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this)]\n        }, post.post_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      visible: false,\n      width: \"800\",\n      height: \"400\",\n      effect: \"fadeInDown\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Please enter a PIN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), pinNotifVisible ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-pin-notif\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Invalid Pin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 73\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 40\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: verifyPin,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"list-pin-input\",\n            onChange: e => setPin(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              value: \"Submit\",\n              className: \"btn popup-btn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn popup-btn\",\n              onClick: exitModal,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Table, \"krbekj7/9VAvXYDGDrO46lV1OL0=\", false, function () {\n  return [useModal];\n});\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/home/dgnan/frisk-test/frisk-test-frontend/src/components/Table.js"],"names":["React","useState","useEffect","useModal","CSVDownload","Table","postid","setPostid","pinNotifVisible","setPinNotifVisible","exportCSV","setExportCSV","pin","setPin","posts","setPosts","csvData","setCSVData","Modal","open","close","preventScroll","pullPosts","res","fetch","data","json","error","console","log","message","verifyPin","e","preventDefault","method","headers","body","JSON","stringify","post_id","post_pin","status","i","length","post_message","deletePost","id","filter","p","savePostID","exitModal","exportSelectedRows","children","document","getElementById","childNodes","exportData","forEach","child","item","checked","substring","push","sleep","ms","Promise","resolve","setTimeout","map","post","post_creation","post_name","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport useModal from 'react-hooks-use-modal'\nimport { CSVDownload } from 'react-csv'\n\nexport default function Table() {\n\n    const [postid, setPostid] = useState(\"\")\n    const [pinNotifVisible, setPinNotifVisible] = useState(false)\n    const [exportCSV, setExportCSV] = useState(false)\n    const [pin, setPin] = useState(\"\")\n    const [posts, setPosts] = useState([])\n    const [csvData, setCSVData] = useState([])\n    const [Modal, open, close] = useModal('root', {\n        preventScroll: true\n    })\n\n    useEffect(() => {\n        pullPosts()\n    }, [])\n\n    const pullPosts = async () => {\n        try {\n            const res = await fetch(\"http://localhost:5000/all\")\n            const data = await res.json()\n            setPosts(data)\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const verifyPin = async e => {\n        e.preventDefault()\n        try {\n            const res = await fetch(\"http://localhost:5000/auth\", {\n                method: 'POST',\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ post_id: postid, post_pin: pin })\n            })\n            if (res.status === 200) {\n                const data = await res.json()\n                for (var i = 0; i < posts.length; i++) {\n                    if (posts[i].post_id === postid) {\n                        posts[i].post_message = data.post_message\n                        break;\n                    }\n                }\n                close()\n            } else {\n                setPinNotifVisible(true)\n            }\n            setPin(\"\")\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const deletePost = async (id) => {\n        try {\n            console.log(await fetch(`http://localhost:5000/delete/${id}`, { method: \"DELETE\" }))\n            setPosts(posts.filter(p => p.post_id !== id))\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const savePostID = (post_id) => {\n        try {\n            setPinNotifVisible(false)\n            setPostid(post_id)\n            open()\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const exitModal = () => {\n        setPinNotifVisible(false)\n        close()\n    }\n\n    const exportSelectedRows = async () => {\n        if (csvData !== []) {\n            const children = document.getElementById(\"table-data\").childNodes\n            var exportData = []\n            //aware of how slow it is to find all selected exports,\n            //would be more ideal to use a hashmap as the data structure for \n            //posts however will take too much time at this point to change it.\n            children.forEach(child => {\n                if (child.childNodes.item(4).childNodes.item(0).checked) {\n                    posts.filter(p => p.post_id == child.id.substring(10)).forEach(item => {\n                        exportData.push(item)\n                        console.log(item)\n                    })\n                }\n            })\n            setCSVData(exportData)\n            setExportCSV(true)\n            await sleep(1)\n            setExportCSV(false)\n            setCSVData([])\n        }\n    }\n\n    const sleep = (ms) => {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    return (\n        <div className=\"table-content\">\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Name</th>\n                        <th>Message</th>\n                        <th>Delete</th>\n                        <th>{exportCSV ? <CSVDownload data={csvData}></CSVDownload> : <button className=\"table-btn\" onClick={exportSelectedRows}>Export</button>}</th>\n                    </tr>\n                </thead>\n                <tbody id=\"table-data\">\n                    {posts.map(post => (\n                        <tr id={`post-data-${post.post_id}`} key={post.post_id}>\n                            <td>{post.post_creation}</td>\n                            <td>{post.post_name}</td>\n                            <td>{post.post_message !== \"\" ? post.post_message : <button className=\"table-btn\" onClick={() => savePostID(post.post_id)}>Reveal</button>}</td>\n                            <td><button className=\"table-btn\" onClick={() => deletePost(post.post_id)}>Delete</button></td>\n                            <td id=\"table-data-export\" className=\"table-checkbox\"><input id=\"table-data-export-checkbox\" type=\"checkbox\"></input></td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            <Modal visible={false} width=\"800\" height=\"400\" effect=\"fadeInDown\">\n                <div className=\"popup-content\">\n                    <h3>Please enter a PIN</h3>\n                    {pinNotifVisible ? <div className=\"popup-pin-notif\"><p>Invalid Pin</p></div> : null}\n                    <form onSubmit={verifyPin}>\n                        <input type=\"number\" id=\"list-pin-input\" onChange={e => setPin(e.target.value)}></input>\n                        <div className=\"popup-buttons\">\n                            <input type=\"submit\" value=\"Submit\" className=\"btn popup-btn\"></input>\n                            <button className=\"btn popup-btn\" onClick={exitModal}>Cancel</button>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}