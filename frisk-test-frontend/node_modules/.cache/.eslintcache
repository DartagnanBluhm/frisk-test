[{"/home/dgnan/frisk-test/frisk-test-frontend/src/index.js":"1","/home/dgnan/frisk-test/frisk-test-frontend/src/App.js":"2","/home/dgnan/frisk-test/frisk-test-frontend/src/routes/Home.js":"3","/home/dgnan/frisk-test/frisk-test-frontend/src/routes/List.js":"4","/home/dgnan/frisk-test/frisk-test-frontend/src/components/Table.js":"5","/home/dgnan/frisk-test/frisk-test-frontend/src/components/Form.js":"6"},{"size":261,"mtime":1620012865869,"results":"7","hashOfConfig":"8"},{"size":309,"mtime":1620012865869,"results":"9","hashOfConfig":"8"},{"size":320,"mtime":1620012865869,"results":"10","hashOfConfig":"8"},{"size":242,"mtime":1620012865869,"results":"11","hashOfConfig":"8"},{"size":4031,"mtime":1620111478186,"results":"12","hashOfConfig":"8"},{"size":2083,"mtime":1620095813467,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1g9nm3h",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dgnan/frisk-test/frisk-test-frontend/src/index.js",[],["28","29"],"/home/dgnan/frisk-test/frisk-test-frontend/src/App.js",[],"/home/dgnan/frisk-test/frisk-test-frontend/src/routes/Home.js",[],"/home/dgnan/frisk-test/frisk-test-frontend/src/routes/List.js",[],"/home/dgnan/frisk-test/frisk-test-frontend/src/components/Table.js",["30","31","32"],"import React, { useState, useEffect } from 'react'\nimport useModal from 'react-hooks-use-modal'\n\nexport default function Table() {\n\n    const [postid, setPostid] = useState(\"\")\n    const [visible, setVisible] = useState(false)\n    const [pin, setPin] = useState(\"\")\n    const [posts, addPosts] = useState([])\n    const [Modal, open, close] = useModal('root', {\n        preventScroll: true\n    })\n\n    useEffect(() => {\n        pullPosts()\n    }, [])\n\n    const pullPosts = async () => {\n        try {\n            const res = await fetch(\"http://localhost:5000/all\")\n            const tableData = await res.json()\n            addPosts(tableData)\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const verifyPin = async e => {\n        e.preventDefault()\n        try {\n            const res = await fetch(\"http://localhost:5000/auth\", {\n                method: 'POST',\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ post_id: postid, post_pin: pin })\n            })\n            if (res.status === 200) {\n                const data = await res.json()\n                console.log(data)\n                console.log(posts)\n                for (var i = 0, row; row = posts[i]; i++) {\n                    if (posts[i].post_id === postid) {\n                        posts[i].post_message = data.post_message\n                        break;\n                    }\n                }\n                console.log(posts)\n                close()\n            } else {\n                setVisible(true)\n            }\n            setPin(\"\")\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const deletePost = async (id) => {\n        try {\n            console.log(fetch(`http://localhost:5000/delete/${id}`, { method: \"DELETE\" }))\n            addPosts(posts.filter(p => p.post_id !== id))\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const savePostID = (post_id) => {\n        try {\n            setVisible(false)\n            setPostid(post_id)\n            open()\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const exitModal = () => {\n        setVisible(false)\n        close()\n    }\n\n    return (\n        <div className=\"table-content\">\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Name</th>\n                        <th>Message</th>\n                        <th>Delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {posts.map(post => (\n                        <tr key={post.post_id}>\n                            <td>{post.post_creation}</td>\n                            <td>{post.post_name}</td>\n                            <td>{post.message == \"\" ? post.message : <button className=\"btn\" onClick={() => savePostID(post.post_id)}>Reveal</button>}</td>\n                            <td><button className=\"btn\" onClick={() => deletePost(post.post_id)}>Delete</button></td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            <Modal visible={false} width=\"800\" height=\"400\" effect=\"fadeInDown\">\n                <div className=\"popup-content\">\n                    <h3>Please enter a pin</h3>\n                    {visible ? <div className=\"popup-pin-notif\"><p>Invalid Pin</p></div> : null}\n                    <form onSubmit={verifyPin}>\n                        <input type=\"number\" id=\"list-pin-input\" onChange={e => setPin(e.target.value)}></input>\n                        <div className=\"popup-buttons\">\n                            <input type=\"submit\" value=\"Submit\" className=\"btn popup-btn\"></input>\n                            <button className=\"btn popup-btn\" onClick={exitModal}>Cancel</button>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n        </div>\n    )\n}\n","/home/dgnan/frisk-test/frisk-test-frontend/src/components/Form.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":40,"column":38,"nodeType":"39","messageId":"40","endLine":40,"endColumn":52},{"ruleId":"41","severity":1,"message":"42","line":40,"column":38,"nodeType":"43","messageId":"44","endLine":40,"endColumn":41},{"ruleId":"45","severity":1,"message":"46","line":97,"column":47,"nodeType":"47","messageId":"48","endLine":97,"endColumn":49},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-unused-vars","'row' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]